// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SampleObject.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protobuf {

  /// <summary>Holder for reflection information generated from SampleObject.proto</summary>
  public static partial class SampleObjectReflection {

    #region Descriptor
    /// <summary>File descriptor for SampleObject.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SampleObjectReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJTYW1wbGVPYmplY3QucHJvdG8SCFByb3RvYnVmIm4KDFNhbXBsZU9iamVj",
            "dBIMCgR0eXBlGAEgASgFEhIKCm9iamVjdE5hbWUYAiABKAkSFAoMc2FtcGxl",
            "U3RyaW5nGAMgASgJEhEKCXNhbXBsZUludBgEIAEoBRITCgtzYW1wbGVGbG9h",
            "dBgFIAEoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.SampleObject), global::Protobuf.SampleObject.Parser, new[]{ "Type", "ObjectName", "SampleString", "SampleInt", "SampleFloat" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SampleObject : pb::IMessage<SampleObject> {
    private static readonly pb::MessageParser<SampleObject> _parser = new pb::MessageParser<SampleObject>(() => new SampleObject());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SampleObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.SampleObjectReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SampleObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SampleObject(SampleObject other) : this() {
      type_ = other.type_;
      objectName_ = other.objectName_;
      sampleString_ = other.sampleString_;
      sampleInt_ = other.sampleInt_;
      sampleFloat_ = other.sampleFloat_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SampleObject Clone() {
      return new SampleObject(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "objectName" field.</summary>
    public const int ObjectNameFieldNumber = 2;
    private string objectName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObjectName {
      get { return objectName_; }
      set {
        objectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sampleString" field.</summary>
    public const int SampleStringFieldNumber = 3;
    private string sampleString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SampleString {
      get { return sampleString_; }
      set {
        sampleString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sampleInt" field.</summary>
    public const int SampleIntFieldNumber = 4;
    private int sampleInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SampleInt {
      get { return sampleInt_; }
      set {
        sampleInt_ = value;
      }
    }

    /// <summary>Field number for the "sampleFloat" field.</summary>
    public const int SampleFloatFieldNumber = 5;
    private float sampleFloat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SampleFloat {
      get { return sampleFloat_; }
      set {
        sampleFloat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SampleObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SampleObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (ObjectName != other.ObjectName) return false;
      if (SampleString != other.SampleString) return false;
      if (SampleInt != other.SampleInt) return false;
      if (SampleFloat != other.SampleFloat) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ObjectName.Length != 0) hash ^= ObjectName.GetHashCode();
      if (SampleString.Length != 0) hash ^= SampleString.GetHashCode();
      if (SampleInt != 0) hash ^= SampleInt.GetHashCode();
      if (SampleFloat != 0F) hash ^= SampleFloat.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (ObjectName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ObjectName);
      }
      if (SampleString.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SampleString);
      }
      if (SampleInt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SampleInt);
      }
      if (SampleFloat != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SampleFloat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ObjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectName);
      }
      if (SampleString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SampleString);
      }
      if (SampleInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SampleInt);
      }
      if (SampleFloat != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SampleObject other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ObjectName.Length != 0) {
        ObjectName = other.ObjectName;
      }
      if (other.SampleString.Length != 0) {
        SampleString = other.SampleString;
      }
      if (other.SampleInt != 0) {
        SampleInt = other.SampleInt;
      }
      if (other.SampleFloat != 0F) {
        SampleFloat = other.SampleFloat;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            ObjectName = input.ReadString();
            break;
          }
          case 26: {
            SampleString = input.ReadString();
            break;
          }
          case 32: {
            SampleInt = input.ReadInt32();
            break;
          }
          case 45: {
            SampleFloat = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
